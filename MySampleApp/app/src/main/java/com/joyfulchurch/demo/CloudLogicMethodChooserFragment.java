package com.joyfulchurch.demo;
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.18
//

import android.content.Context;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;

import com.amazonaws.mobile.api.CloudLogicAPIFactory;
import com.amazonaws.mobile.api.CloudLogicAPIConfiguration;
import com.joyfulchurch.MainActivity;
import com.joyfulchurch.R;

/**
 * Selects one of the HTTP methods to demonstrate on your Amazon API Gateway REST API.
 */
public class CloudLogicMethodChooserFragment extends DemoFragmentBase implements AdapterView.OnItemClickListener, View.OnClickListener {

    private static final String LOG_TAG = CloudLogicMethodChooserFragment.class.getSimpleName();

    public static final String BUNDLE_ARG_API_INDEX = "api-index";
    public static final String BUNDLE_ARG_PATH = "path";

    private static final String METHOD_GET     = "GET";
    private static final String METHOD_PUT     = "PUT";
    private static final String METHOD_POST    = "POST";
    private static final String METHOD_DELETE  = "DELETE";
    private static final String METHOD_PATCH   = "PATCH";
    private static final String METHOD_HEAD    = "HEAD";

    private static final String[] METHODS = { METHOD_GET, METHOD_PUT, METHOD_POST, METHOD_DELETE, METHOD_PATCH, METHOD_HEAD };

    private static final CloudLogicAPIConfiguration[] API_CONFIGURATIONS =
            CloudLogicAPIFactory.getAPIs();

    private TextView endpointView;
    private EditText pathView;
    private CloudLogicAPIConfiguration cloudLogicAPIConfiguration;
    private int apiIndex;
    private Bundle args;

    public CloudLogicMethodChooserFragment() {}

    public static CloudLogicMethodChooserFragment newInstance() {
        return new CloudLogicMethodChooserFragment();
    }

    @Override
    public View onCreateView(final LayoutInflater inflater,
                             final ViewGroup container,
                             final Bundle savedInstanceState) {

        // Inflate the layout for this fragment
        final View view =
            inflater.inflate(R.layout.fragment_demo_cloudlogic_method_chooser, container, false);
        endpointView = (TextView)view.findViewById(R.id.cloudlogic_textView_endpoint_value);
        pathView = (EditText)view.findViewById(R.id.cloudlogic_editText_path);

        args = getArguments();

        setupView(args);

        pathView.setOnClickListener(this);

        final ListView listView = (ListView)view.findViewById(R.id.cloudlogic_method_chooser_list);
        listView.setDivider(null);

        final ArrayAdapter adapter =
                new ArrayAdapter<String>(getContext(), R.layout.list_item_cloudlogic_method_chooser, METHODS) {
                    @Override
                    public View getView(final int position, final View convertView, final ViewGroup parent) {

                        final View view;

                        if (convertView == null) {
                            final LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                            view = inflater.inflate(R.layout.list_item_cloudlogic_method_chooser, parent, false);
                        } else {
                            view = convertView;
                        }

                        final TextView method = (TextView)view.findViewById(R.id.list_item_cloudlogic_method_chooser_method);
                        final TextView path = (TextView)view.findViewById(R.id.list_item_cloudlogic_method_chooser_path);

                        final String methodValue = METHODS[position];
                        final int color = getMethodColor(methodValue, getContext());

                        method.setText(methodValue);
                        method.setBackgroundColor(color);
                        path.setText(pathView.getText());

                        return view;
                    };
                };

        listView.setAdapter(adapter);
        listView.setOnItemClickListener(this);

        return view;
    }

    @Override
    public void onResume() {
        super.onResume();

        // Get results from other fragment
        final Bundle fragmentBundle = ((MainActivity)getActivity()).getFragmentBundle();

        if (fragmentBundle != null) {
            setupView(fragmentBundle);
        }
    }

    private void setupView(final Bundle args) {
        apiIndex = args.getInt(BUNDLE_ARG_API_INDEX);

        Log.d(LOG_TAG, "API Index : " + apiIndex);

        cloudLogicAPIConfiguration = API_CONFIGURATIONS[apiIndex];

        endpointView.setText(cloudLogicAPIConfiguration.getEndpoint());

        final String pathValue;

        if (args.containsKey(BUNDLE_ARG_PATH)) {
            pathValue = args.getString(BUNDLE_ARG_PATH);
        } else {
            pathValue = cloudLogicAPIConfiguration.getPaths()[0];
        }

        pathView.setText(pathValue);
    }

    @Override
    public void onItemClick(final AdapterView<?> parent, final View view, final int position, final long id) {
        Log.d(LOG_TAG, "onItemClick: " + position);

        final String method = parent.getAdapter().getItem(position).toString();
        Log.d(LOG_TAG, "Method: " + method);

        final Bundle bundle = new Bundle();
        bundle.putInt(CloudLogicInvokerFragment.BUNDLE_ARG_API_INDEX, apiIndex);
        bundle.putString(CloudLogicInvokerFragment.BUNDLE_ARG_PATH, pathView.getText().toString());
        bundle.putString(CloudLogicInvokerFragment.BUNDLE_ARG_METHOD, method);

        final Fragment fragment = CloudLogicInvokerFragment.newInstance();
        fragment.setArguments(bundle);

        getFragmentManager()
                .beginTransaction()
                .addToBackStack(null)
                .replace(R.id.main_fragment_container, fragment, cloudLogicAPIConfiguration.getDisplayName())
                .commit();
    }

    @Override
    public void onClick(final View pathView) {
        Log.d(LOG_TAG, "onClick");

        final Bundle bundle = new Bundle();
        bundle.putInt(CloudLogicPathChooserFragment.BUNDLE_ARG_API_INDEX, apiIndex);
        bundle.putString(CloudLogicPathChooserFragment.BUNDLE_ARG_PATH,
                         ((EditText)pathView).getText().toString());

        final Fragment fragment = CloudLogicPathChooserFragment.newInstance();
        fragment.setArguments(bundle);

        getFragmentManager()
                .beginTransaction()
                .addToBackStack(null)
                .replace(R.id.main_fragment_container, fragment, cloudLogicAPIConfiguration.getDisplayName())
                .commit();
    }

    public static int getMethodColor(final String methodValue, final Context context) {
        switch (methodValue) {
            case METHOD_GET: {
                return ContextCompat.getColor(context, R.color.http_method_background_read);
            }
            case METHOD_PUT: {
                return ContextCompat.getColor(context, R.color.http_method_background_update);
            }
            case METHOD_POST: {
                return ContextCompat.getColor(context, R.color.http_method_background_general);
            }
            case METHOD_DELETE: {
                return ContextCompat.getColor(context, R.color.http_method_background_delete);
            }
            case METHOD_PATCH: {
                return ContextCompat.getColor(context, R.color.http_method_background_update);
            }
            case METHOD_HEAD: {
                return ContextCompat.getColor(context, R.color.http_method_background_read);
            }
            default: {
                throw new IllegalArgumentException("Unsupported HTTP method : " + methodValue);
            }
        }
    }
}
