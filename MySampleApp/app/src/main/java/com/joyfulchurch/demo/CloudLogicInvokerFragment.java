package com.joyfulchurch.demo;
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.18
//

import android.net.UrlQuerySanitizer;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.support.v4.app.Fragment;

import com.amazonaws.http.HttpMethodName;
import com.amazonaws.mobile.AWSMobileClient;
import com.amazonaws.mobile.api.CloudLogicAPI;
import com.amazonaws.mobile.api.CloudLogicAPIFactory;
import com.amazonaws.mobile.api.CloudLogicAPIConfiguration;
import com.amazonaws.mobilehelper.util.ThreadUtils;
import com.amazonaws.mobileconnectors.apigateway.ApiRequest;
import com.amazonaws.mobileconnectors.apigateway.ApiResponse;
import com.amazonaws.util.IOUtils;
import com.amazonaws.util.StringUtils;
import com.joyfulchurch.R;

import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Invokes REST APIs in an Amazon API Gateway endpoint.
 */
public class CloudLogicInvokerFragment extends DemoFragmentBase implements View.OnClickListener {

    private static final String LOG_TAG = CloudLogicInvokerFragment.class.getSimpleName();

    private static final String DEFAULT_QUERY_STRING = "?lang=en_US";
    private static final String DEFAULT_REQUEST_BODY = "{\n  \"param1\" : \"value1\",\n  \"param2\" : \"value2\",\n  \"param3\" : \"value3\"\n}";

    public static final String BUNDLE_ARG_API_INDEX = "api-index";
    public static final String BUNDLE_ARG_PATH = "path";
    public static final String BUNDLE_ARG_METHOD = "method";

    private TextView endpointView;
    private TextView methodView;
    private TextView pathView;
    private TextView statusView;
    private TextView latencyView;
    private EditText queryStringView;
    private EditText requestBodyView;
    private EditText responseBodyView;
    private Button invokeButton;
    private Button resetButton;

    private CloudLogicAPIConfiguration apiConfiguration;

    public CloudLogicInvokerFragment() {}

    public static CloudLogicInvokerFragment newInstance() {
        return new CloudLogicInvokerFragment();
    }

    @Override
    public View onCreateView(final LayoutInflater inflater,
                             final ViewGroup container,
                             final Bundle savedInstanceState) {

        // Inflate the layout for this fragment
        final View view =
            inflater.inflate(R.layout.fragment_demo_cloudlogic_invoker, container, false);

        final Bundle args = getArguments();
        final int apiIndex = args.getInt(BUNDLE_ARG_API_INDEX);
        final String path = args.getString(BUNDLE_ARG_PATH);
        final String method = args.getString(BUNDLE_ARG_METHOD);

        Log.d(LOG_TAG, "API Index : " + apiIndex);

        apiConfiguration = CloudLogicAPIFactory.getAPIs()[apiIndex];
        final String endpoint = apiConfiguration.getEndpoint();

        Log.d(LOG_TAG, "Endpoint : " + endpoint);
        Log.d(LOG_TAG, "Path : " + path);
        Log.d(LOG_TAG, "Method : " + method);

        endpointView = (TextView)view.findViewById(R.id.cloudlogic_textView_invoker_endpoint);
        invokeButton = (Button)view.findViewById(R.id.cloudlogic_button_invoke);
        resetButton = (Button)view.findViewById(R.id.cloudlogic_button_reset);
        queryStringView = (EditText)view.findViewById(R.id.cloudlogic_editText_queryString);
        requestBodyView = (EditText)view.findViewById(R.id.cloudlogic_editText_request);
        responseBodyView = (EditText)view.findViewById(R.id.cloudlogic_editText_response);
        statusView = (TextView)view.findViewById(R.id.cloudlogic_invoker_status_value);
        latencyView = (TextView)view.findViewById(R.id.cloudlogic_invoker_latency_value);

        final View methodPanel = view.findViewById(R.id.cloud_logic_item_method);

        pathView = (TextView)methodPanel.findViewById(R.id.list_item_cloudlogic_method_chooser_path);
        methodView = (TextView)methodPanel.findViewById(R.id.list_item_cloudlogic_method_chooser_method);

        endpointView.setText(endpoint);
        pathView.setText(path);
        methodView.setText(method);
        methodView.setBackgroundColor(CloudLogicMethodChooserFragment.getMethodColor(method, getContext()));
        requestBodyView.setText(DEFAULT_REQUEST_BODY);
        queryStringView.setText(DEFAULT_QUERY_STRING);
        responseBodyView.setText("");

        final View requestLabel = view.findViewById(R.id.cloudlogic_textView_requestbody_label);

        if (HttpMethodName.GET.name().equalsIgnoreCase(method) ||
            HttpMethodName.HEAD.name().equalsIgnoreCase(method)) {
            requestBodyView.setVisibility(View.INVISIBLE);
            requestLabel.setVisibility(View.INVISIBLE);
            requestBodyView.setText("");
        } else {
            requestBodyView.setVisibility(View.VISIBLE);
            requestLabel.setVisibility(View.VISIBLE);
        }

        invokeButton.setOnClickListener(this);
        resetButton.setOnClickListener(this);

        return view;
    }

    @Override
    public void onClick(final View view) {
        Log.d(LOG_TAG, "onClick");

        if (view.equals(invokeButton)) {
            Log.d(LOG_TAG, "Invoke");

            final String method = methodView.getText().toString();
            final String path = pathView.getText().toString();
            final String body = requestBodyView.getText().toString();

            String queryStringText = queryStringView.getText().toString();

            final Map<String, String> parameters = convertQueryStringToParameters(queryStringText);

            final CloudLogicAPI client =
                AWSMobileClient.defaultMobileClient().createAPIClient(apiConfiguration.getClientClass());

            final Map<String, String> headers = new HashMap<String, String>();

            final byte[] content = body.getBytes(StringUtils.UTF8);

            ApiRequest tmpRequest =
                new ApiRequest(client.getClass().getSimpleName())
                    .withPath(path)
                    .withHttpMethod(HttpMethodName.valueOf(method))
                    .withHeaders(headers)
                    .addHeader("Content-Type", "application/json")
                    .withParameters(parameters);

            final ApiRequest request;

            // Only set body if it has content.
            if (body.length() > 0) {
                request = tmpRequest
                        .addHeader("Content-Length", String.valueOf(content.length))
                        .withBody(content);
            } else {
                request = tmpRequest;
            }

            final Fragment fragment = this;

            // Make network call on background thread
            new Thread(new Runnable() {
                Exception exception = null;

                @Override
                public void run() {
                    try {
                        Log.d(LOG_TAG, "Invoking API w/ Request : " + request.getHttpMethod() + ":" + request.getPath());

                        long startTime = System.currentTimeMillis();

                        final ApiResponse response = client.execute(request);

                        final long latency = System.currentTimeMillis() - startTime;

                        final InputStream responseContentStream = response.getContent();

                        if (responseContentStream != null) {
                            final String responseData = IOUtils.toString(responseContentStream);
                            Log.d(LOG_TAG, "Response : " + responseData);
                            setResponseBodyText(responseData);
                        }

                        ThreadUtils.runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                if (!isDetached()) {
                                    statusView.setText(response.getStatusCode() + " " + response.getStatusText());
                                    latencyView.setText(String.format("%4.3f sec", latency / 1000.0f));
                                }
                            }
                        });
                    } catch (final Exception exception) {
                        Log.e(LOG_TAG, exception.getMessage(), exception);
                        exception.printStackTrace();

                        ThreadUtils.runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                setResponseBodyText(exception.getMessage());
                            }
                        });
                    }
                }
            }).start();

        } else if (view.equals(resetButton)) {
            Log.d(LOG_TAG, "Reset");
            requestBodyView.setText(DEFAULT_REQUEST_BODY);
            queryStringView.setText(DEFAULT_QUERY_STRING);
            responseBodyView.setText("");
        } else {
            Log.e(LOG_TAG, "Unexpected view click.");
        }
    }

    private Map<String,String> convertQueryStringToParameters(String queryStringText) {

        while (queryStringText.startsWith("?") && queryStringText.length() > 1) {
            queryStringText = queryStringText.substring(1);
        }

        final UrlQuerySanitizer sanitizer = new UrlQuerySanitizer();
        sanitizer.setAllowUnregisteredParamaters(true);
        sanitizer.parseQuery(queryStringText);

        final List<UrlQuerySanitizer.ParameterValuePair> pairList = sanitizer.getParameterList();
        final Map<String, String> parameters = new HashMap<>();

        for (final UrlQuerySanitizer.ParameterValuePair pair : pairList) {
            Log.d(LOG_TAG, pair.mParameter + " = " + pair.mValue);
            parameters.put(pair.mParameter, pair.mValue);
        }

        return parameters;
    }

    private void setResponseBodyText(final String text) {
        ThreadUtils.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (isDetached()) {
                    Log.d(LOG_TAG, "Fragment detached. Skipping API response handling...");
                    return;
                }

                responseBodyView.setText(text);
            }
        });
    }
}
